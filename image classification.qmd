---
title: "Image classification"
format: html
editor: visual
---

## Computer Vision: **Image Classification**

Train a neural network model to classify images of clothing

## **Installation** 

```{r}
# install.packages("remotes")
#remotes::install_github("rstudio/tensorflow")

##Visualize neural network architectures
#remotes::install_github("andrie/deepviz")
```

```{r}
# library(reticulate)
# reticulate::install_miniconda()
```

```{r}
# install.packages("tensorflow")
 # library(tensorflow)
 # install_tensorflow(envname = "r-tensorflow")
```

```{r}
#install.packages("keras")
# library(keras)
# install_keras()
```

**Note:** Install Keras and tensorflow through ANACONDA into python 3.9. in this case the python environment is "*`r-reticulate`*"

## Library

```{r}
#| message: false
#| warning: false
#library
library(keras)
#library(reticulate)
#library(tidyverse)
library(tensorflow)
```

```{r}
#| message: false
#| warning: false
library(deepviz)
```

## Example

<https://tensorflow.rstudio.com/tutorials/keras/classification>

```{r}
#| echo: true
fashion_mnist <- dataset_fashion_mnist()
```

```{r}
c(train_images, train_labels) %<-% fashion_mnist$train
c(test_images, test_labels) %<-% fashion_mnist$test
```

At this point we have four arrays: The train_images and train_labels arrays are the training set — the data the model uses to learn. The model is tested against the test set: the test_images, and test_labels arrays.

The images each are 28 x 28 arrays, with pixel values ranging between 0 and 255. The labels are arrays of integers, ranging from 0 to 9. These correspond to the class of clothing the image represents:

| Digit | Class       |
|-------|-------------|
| 0     | T-shirt/top |
| 1     | Trouser     |
| 2     | Pullover    |
| 3     | Dress       |
| 4     | Coat        |
| 5     | Sandal      |
| 6     | Shirt       |
| 7     | Sneaker     |
| 8     | Bag         |
| 9     | Ankle boot  |

```{r}
class_names = c('T-shirt/top',
                'Trouser',
                'Pullover',
                'Dress',
                'Coat',
                'Sandal',
                'Shirt',
                'Sneaker',
                'Bag',
                'Ankle boot')
```

### Data Exploration

Let’s explore the format of the dataset before training the model. The following shows there are 60,000 images in the training set, with each image represented as 28 x 28 pixels:

```{r}
dim(train_images)
dim(train_labels)
```

```{r}
dim(test_images)
dim(test_labels)
```

```{r}
library(tidyr)
library(ggplot2)

image_1 <- as.data.frame(train_images[1, , ])
colnames(image_1) <- seq_len(ncol(image_1))
image_1$y <- seq_len(nrow(image_1))
image_1 <- gather(image_1, "x", "value", -y)
image_1$x <- as.integer(image_1$x)

ggplot(image_1, aes(x = x, y = y, fill = value)) +
  geom_tile() +
  scale_fill_gradient(low = "white", high = "black", na.value = NA) +
  scale_y_reverse() +
  theme_minimal() +
  theme(panel.grid = element_blank())   +
  theme(aspect.ratio = 1) +
  xlab("") +
  ylab("")
```

We scale these values to a range of 0 to 1 before feeding to the neural network model. For this, we simply divide by 255.

It’s important that the training set and the testing set are preprocessed in the same way:

```{r}
train_images <- train_images / 255
test_images <- test_images / 255
```

Display the first 25 images from the training set and display the class name below each image. Verify that the data is in the correct format and we’re ready to build and train the network.

```{r}
par(mfcol=c(5,5))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:25) {
  img <- train_images[i, , ]
  img <- t(apply(img, 2, rev))
  image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
        main = paste(class_names[train_labels[i] + 1]))
}
```

## **Build the model**

Building the neural network requires configuring the layers of the model, then compiling the model.

### **Setup the layers**

The basic building block of a neural network is the layer. Layers extract representations from the data fed into them. And, hopefully, these representations are more meaningful for the problem at hand.

Most of deep learning consists of chaining together simple layers. Most layers, like `layer_dense`, have parameters that are learned during training.

```{r}
#| message: false
#| warning: false
model <- keras_model_sequential()
model %>%
  layer_flatten(input_shape = c(28, 28)) %>%
  layer_dense(units = 128, activation = 'relu') %>%
  layer_dense(units = 10, activation = 'softmax')
```

```{r}
#| message: false
#| warning: false
#https://andrie.github.io/deepviz/index.html
model %>% plot_model()
```

After the pixels are flattened, the network consists of a sequence of two `dense` layers. These are densely-connected, or fully-connected, neural layers. The first dense layer has 128 nodes (or neurons). The second (and last) layer is a 10-node softmax layer —this returns an array of 10 probability scores that sum to 1. Each node contains a score that indicates the probability that the current image belongs to one of the 10 digit classes.

### **Compile the model**

Before the model is ready for training, it needs a few more settings. These are added during the model’s compile step:

-   Loss function — This measures how accurate the model is during training. We want to minimize this function to “steer” the model in the right direction.

-   Optimizer — This is how the model is updated based on the data it sees and its loss function.

-   Metrics —Used to monitor the training and testing steps. The following example uses accuracy, the fraction of the images that are correctly classified.

```{r}
model %>% compile(
  optimizer = 'adam',
  loss = 'sparse_categorical_crossentropy',
  metrics = c('accuracy')
)
```

### **Train the model**

Training the neural network model requires the following steps:

-   Feed the training data to the model — in this example, the `train_images` and `train_labels` arrays.

-   The model learns to associate images and labels.

-   We ask the model to make predictions about a test set — in this example, the test_images array. We verify that the predictions match the labels from the test_labels array.

To start training, call the `fit` method — the model is “fit” to the training data:

```{r}
model %>% fit(train_images, train_labels, epochs = 10, verbose = 2)
```

As the model trains, the loss and accuracy metrics are displayed. This model reaches an accuracy of about 0.92 (or 92%) on the training data.

```{r}
score <- model %>% evaluate(test_images, test_labels, verbose = 0)

cat('Test loss:', score["loss"], "\n")
```

```{r}
cat('Test accuracy:', score["accuracy"], "\n")
```

### **Make predictions**

With the model trained, we can use it to make predictions about some images.

```{r}
predictions <- model %>% predict(test_images)
```

Here, the model has predicted the label for each image in the testing set. Let’s take a look at the first prediction:

```{r}
predictions[1, ]
```

Let’s plot several images with their predictions. Correct prediction labels are green and incorrect prediction labels are red.

```{r}
par(mfcol=c(5,5))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:25) {
  img <- test_images[i, , ]
  img <- t(apply(img, 2, rev))
  # subtract 1 as labels go from 0 to 9
  predicted_label <- which.max(predictions[i, ]) - 1
  true_label <- test_labels[i]
  if (predicted_label == true_label) {
    color <- '#008800'
  } else {
    color <- '#bb0000'
  }
  image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
        main = paste0(class_names[predicted_label + 1], " (",
                      class_names[true_label + 1], ")"),
        col.main = color)
}
```

## Build a Complex Model

### Setup the Layers

```{r}
#| message: false
#| warning: false



# model2 <- keras_model_sequential()
# 
# model2 %>%
#   layer_flatten(input_shape = c(28, 28)) %>%
#   layer_dense(units = 256, activation = 'relu') %>%
#   layer_dropout(rate = 0.5) %>%
#   layer_dense(units = 128, activation = 'relu') %>%
#   layer_dropout(rate = 0.3) %>%
#   layer_dense(units = 64, activation = 'relu') %>%
#   layer_dropout(rate = 0.2) %>%
#   layer_dense(units = 10, activation = 'softmax')

model2 <- keras_model_sequential()

model2 %>%
  layer_flatten(input_shape = c(28, 28)) %>%
  layer_dense(units = 512, activation = 'relu') %>%
  layer_batch_normalization() %>%
  layer_dropout(rate = 0.5) %>%
  
  layer_dense(units = 256, activation = 'relu') %>%
  layer_batch_normalization() %>%
  layer_dropout(rate = 0.4) %>%
  
  layer_dense(units = 128, activation = 'relu') %>%
  layer_batch_normalization() %>%
  layer_dropout(rate = 0.3) %>%
  
  layer_dense(units = 64, activation = 'relu') %>%
  layer_batch_normalization() %>%
  layer_dropout(rate = 0.2) %>%
  
  layer_dense(units = 10, activation = 'softmax')



# Print the model summary
summary(model2)



```

Here are the modifications (now commented) made to the original code:

1.  **Added Dropout Layers:** Dropout layers are added after each dense layer to reduce overfitting. The dropout rate is a hyperparameter that determines the probability of dropping out a unit during training. Adjust the dropout rates based on your specific dataset and training performance.

2.  **Increased the Number of Units in Dense Layers:** Increasing the number of units in the dense layers can increase the capacity of the model to learn complex patterns in the data.

3.  **Added More Dense Layers:** Adding more layers can help the model learn hierarchical representations of the input data.

4.  **Changed Activation Functions:** The 'relu' activation function is used in the hidden layers, and 'softmax' is used in the output layer for multi-class classification.

5.  **Changed Optimization Algorithm:** The 'adam' optimizer is commonly used for its adaptive learning rate properties.

Improvements made:

1.  **Batch Normalization:** Batch normalization is added after each dense layer to stabilize and accelerate the training process. It helps in mitigating the vanishing/exploding gradient problem.

2.  **Increased Units in First Dense Layer:** The number of units in the first dense layer is increased to 512 for a larger capacity.

3.  **Adjusted Dropout Rates:** Dropout rates are adjusted based on the layer depth. The rates are tuned to strike a balance between preventing overfitting and retaining useful information.

4.  **Changed Learning Rate:** The learning rate of the Adam optimizer is explicitly set to 0.001. This can be adjusted during hyperparameter tuning.

5.  **Tuned Architecture:** The architecture is a bit deeper, with additional layers, to capture more intricate features in the data.

### Visualize Architecture

```{r}
#| message: false
#| warning: false
#https://andrie.github.io/deepviz/index.html
model2 %>% plot_model()
```

### Compile Model

```{r}
# Compile the model
model2 %>% compile(
  optimizer = optimizer_adam(lr = 0.001),
  loss = 'sparse_categorical_crossentropy',
  metrics = c('accuracy')
)
```

### Train the Model

```{r}
model2 %>% fit(train_images, train_labels, epochs = 5, verbose = 2)
```

```{r}
score <- model2 %>% evaluate(test_images, test_labels, verbose = 0)

cat('Test loss:', score["loss"], "\n")
```

```{r}
cat('Test accuracy:', score["accuracy"], "\n")
```

### Make Predictions

```{r}
predictions2 <- model2 %>% predict(test_images)
```

```{r}
par(mfcol=c(5,5))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:25) {
  img <- test_images[i, , ]
  img <- t(apply(img, 2, rev))
  # subtract 1 as labels go from 0 to 9
  predicted_label <- which.max(predictions2[i, ]) - 1
  true_label <- test_labels[i]
  if (predicted_label == true_label) {
    color <- '#008800'
  } else {
    color <- '#bb0000'
  }
  image(1:28, 1:28, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
        main = paste0(class_names[predicted_label + 1], " (",
                      class_names[true_label + 1], ")"),
        col.main = color)
}
```

**Key takeaway:** Complexity does not equate better results

## Extracting Model and Saving to R Script

### Option 1

<https://stackoverflow.com/questions/60592968/how-to-properly-save-a-keras-model-in-r>

<https://tensorflow.rstudio.com/tutorials/keras/save_and_load>

```{r}
# Save the model to an HDF5 file
save_model_hdf5(model2, "model.hdf5")

# Save the model architecture to an R script
model_script <- capture.output({
  cat("# Load required libraries\n")
  cat("library(keras)\n\n")
  cat("# Load the saved model\n")
  cat("model2 <- load_model_hdf5('model.hdf5')\n")
})
writeLines(model_script, "model_script.R")
```

## References

<https://tensorflow.rstudio.com/tutorials/keras/classification>

<https://blogs.rstudio.com/ai/posts/2022-05-31-deep-learning-with-r-2e/>
